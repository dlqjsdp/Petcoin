<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    @fileName : MemberMapper.xml
    - com.petcoin.mapper.MemberMapper 인터페이스와 연결되는 MyBatis 매퍼 XML 파일
    @author : heekyung
    @history
    - 250826 | heekyung | MemberMapper 생성 / 연락처로 회원 조회 코드 작성
    - 250827 | sehui | 전체 회원 목록 조회 + 검색 기능 + 페이징 처리 기능 추가
    - 250827 | sehui | 회원 정보 단건 조회 기능 추가
    - 250828 | heekyung | 로그인 시 비밀번호 반드시 필요하여 비밀번호 관련 코드 추가
    - 250829 | sehui | 페이징 처리를 위한 전체 회원 수 조회 기능 추가
    - 250909 | sehui | Member 테이블에 가입일(created_at) 컬럼 추가
    - 250909 | sehui | 전체 회원 목록 조회 기능에 누적 포인트(totalPoints), 가입일(createdAt), 총 수거량(totalCollections) 컬럼 추가
-->

<mapper namespace="com.petcoin.mapper.MemberMapper">
    <!-- DB 컬럼 ↔ VO 매핑 -->
    <resultMap id="MemberMap" type="com.petcoin.domain.MemberVO">
        <id property="memberId" column="member_id"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="password" column="password"/>
        <result property="createdAt" column="created_at" />
    </resultMap>

    <!-- DB에서 핸드폰 번호 조회 -->
    <select id="findByPhone" parameterType="string" resultMap="MemberMap">
        select
            member_id, phone, role, password, created_at
        from member where phone = #{phone}
    </select>

    <!-- DB에서 핸드폰 번호 존재 여부 조회 -->
    <!-- exists : 논리 함수 중 하나 | member 테이블에서 특정 phone이 존재하는지 확인후 반환하는 역할 -->
    <select id="existsByPhone" parameterType="string" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM member WHERE phone = #{phone})
    </select>

    <!-- 신규 연락처 저장 -->
    <insert id="insertMember" parameterType="com.petcoin.domain.MemberVO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (phone, role, password, created_at)
        VALUES (#{phone}, #{role}, #{password}, NOW())
    </insert>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        update member
        set password = #{password}
        where member_id = #{memberId}
    </update>

    <!-- 검색과 페이징 처리가 포함된 전체 회원 목록 조회 -->
    <select id="findMemberListWithPaging" resultType="com.petcoin.dto.MemberListDto">
        SELECT
            m.member_id AS memberId,
            m.phone AS phone,
            m.role AS role,
            COALESCE(ph.point_balance, 0) AS currentPoint,
            COALESCE(SUM(ph_all.point_balance), 0) AS totalPoints,
            m.created_at AS createdAt,
            -- 총 수거량 계산
            (SELECT COUNT(*)
             FROM pet_collection_log pcl
             WHERE pcl.member_id = m.member_id
                AND pcl.is_collected = 1
             ) AS totalCollections
        FROM member m
        LEFT JOIN
            point_history ph ON m.member_id = ph.member_id
            AND ph.history_id = (
                SELECT MAX(history_id)
                FROM point_history
                WHERE member_id = m.member_id
            )
        LEFT JOIN point_history ph_all
            ON m.member_id = ph_all.member_id
        <where>
            <include refid="memberSearchCondition"/>
        </where>
        GROUP BY m.member_id, m.phone, m.role, ph.point_balance, m.created_at
        ORDER BY m.member_id DESC
        LIMIT #{amount} OFFSET #{offset}
    </select>

    <!-- 검색 조건(핸드폰 번호, 포인트 범위) -->
    <sql id="memberSearchCondition">
        <if test="phone != null and phone !=''">
            AND m.phone LIKE CONCAT('%', #{phone}, '%')
        </if>
        <if test="minPoint != null">
            AND COALESCE(ph.point_balance,0) &gt;= #{minPoint}
        </if>
        <if test="maxPoint != null">
            AND COALESCE(ph.point_balance,0) &lt;= #{maxPoint}
        </if>
    </sql>

    <!-- Id로 회원 정보 단건 조희 -->
    <select id="findMemberById" parameterType="Long" resultMap="MemberMap">
        SELECT member_id, phone, role
        FROM member
        WHERE member_id = #{memberId}
    </select>

    <!-- 전체 회원 수 조회 -->
    <select id="getTotalMember" resultType="int">
        SELECT count(*)
        FROM member
    </select>

</mapper>